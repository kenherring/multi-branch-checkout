[
  {
    "filePath": "D:\\multi-branch-checkout\\src\\commands.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 8,
        "column": 3,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 8,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                280,
                280
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 10,
        "column": 3,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 10,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                396,
                396
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 12,
        "column": 3,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 12,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                500,
                500
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `EmptyFileGroup`.",
        "line": 14,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 14,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'node' will use Object's default stringification format ('[object Object]') when stringified.",
        "line": 14,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "baseToString",
        "endLine": 14,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as vscode from 'vscode'\r\nimport { workerData } from \"worker_threads\"\r\nimport { WorktreeFile, WorktreeFileGroup, WorktreeNode, WorktreeRoot } from \"./worktreeView\"\r\n\r\n\r\nexport function commands_discardChanges(node: WorktreeNode) {\r\n\tif (node instanceof WorktreeFile) {\r\n\t\tvscode.commands.executeCommand('git.clean', { uri: node.uri })\r\n\t} else if (node instanceof WorktreeFileGroup) {\r\n\t\tvscode.window.showWarningMessage('Not yet implemented')\r\n\t} else if (node instanceof WorktreeRoot) {\r\n\t\tvscode.window.showWarningMessage('Not yet implemented')\r\n\t} else {\r\n\t\tthrow new Error('Unknown node type: ' + node)\r\n\t}\r\n}\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-extra-semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "D:\\multi-branch-checkout\\src\\extension.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 6,
        "column": 7,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 6,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 48,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 48,
        "endColumn": 82
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 48,
        "column": 10,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 48,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 48,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 48,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 48,
        "column": 57,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 48,
        "endColumn": 79,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                2297,
                2297
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 51,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 51,
        "endColumn": 84
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 51,
        "column": 10,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 51,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 51,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 51,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 51,
        "column": 59,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 51,
        "endColumn": 81,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                2484,
                2484
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'n.label' may use Object's default stringification format ('[object Object]') when stringified.",
        "line": 67,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "baseToString",
        "endLine": 67,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 81,
        "column": 36,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 81,
        "endColumn": 43,
        "fix": {
          "range": [
            3384,
            3385
          ],
          "text": ""
        }
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `Uri`.",
        "line": 82,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 82,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `never`.",
        "line": 84,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 84,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 95,
        "column": 5,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 95,
        "endColumn": 82
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 95,
        "column": 12,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 95,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 95,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 95,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 108,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 108,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 109,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 109,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 111,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 111,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 113,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 113,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 114,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 114,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'n.label' may use Object's default stringification format ('[object Object]') when stringified.",
        "line": 135,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "baseToString",
        "endLine": 135,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 150,
        "column": 4,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 150,
        "endColumn": 127
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 150,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 150,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 150,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 150,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 155,
        "column": 4,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 155,
        "endColumn": 82
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 155,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 155,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 155,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 155,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 155,
        "column": 64,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 155,
        "endColumn": 79
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stdout on an `any` value.",
        "line": 155,
        "column": 73,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 155,
        "endColumn": 79
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 161,
        "column": 5,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 161,
        "endColumn": 82
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 161,
        "column": 12,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 161,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 161,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 161,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 173,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 173,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 174,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 174,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 175,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 175,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 211,
        "column": 2,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 211,
        "endColumn": 78
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 211,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 211,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 211,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 211,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 6,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 6,
        "endColumn": 35,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 39,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import * as vscode from 'vscode'\r\nimport { WorktreeFile, WorktreeFileGroup, WorktreeNode, WorktreeRoot, WorktreeView } from './worktreeView'\r\nimport { commands_discardChanges } from './commands'\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst git = require('@npmcli/git')\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\tconst rootPath = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\r\n\t\t? vscode.workspace.workspaceFolders[0].uri.fsPath : undefined\r\n\r\n\tconst worktreeView = new WorktreeView(context)\r\n\r\n\t// ********** Any node type ********** //\r\n\tvscode.commands.registerCommand('multi-branch-checkout.discardChanges', (node: WorktreeNode) => {\r\n\t\treturn commands_discardChanges(node)\r\n\t})\r\n\r\n\t// ********** WorktreeFile Commands ********** //\r\n\tvscode.commands.registerCommand('multi-branch-checkout.openFile', (node: WorktreeFile) => {\r\n\t\treturn vscode.commands.executeCommand('vscode.open', node.uri)\r\n\t})\r\n\tvscode.commands.registerCommand('multi-branch-checkout.revertFile', (node: WorktreeFile) => {\r\n\t\treturn vscode.window.showWarningMessage('not yet implemented')\r\n\t})\r\n\tvscode.commands.registerCommand('multi-branch-checkout.compareFileWithMergeBase', (node: WorktreeFile) => {\r\n\t\treturn vscode.window.showWarningMessage('not yet implemented')\r\n\t})\r\n\tvscode.commands.registerCommand('multi-branch-checkout.copyToWorktree', async (node: WorktreeFile) => {\r\n\t\tconst moveToUri = await command_copyToWorktree(node, worktreeView.getRootNodes(), false)\r\n\t\tconsole.log('--- refresh ---')\r\n\t\tawait worktreeView.refresh()\r\n\t\tconsole.log('--- reveal ---')\r\n\t\tif (moveToUri) {\r\n\t\t\tawait worktreeView.reveal(moveToUri, { select: false, focus: true })\r\n\t\t\tconsole.log('--- complete ---')\r\n\t\t} else {\r\n\t\t\tconsole.error('Copy did not return a Uri to reveal')\r\n\t\t}\r\n\t})\r\n\tvscode.commands.registerCommand('multi-branch-checkout.moveToWorktree', (node: WorktreeFile) => {\r\n\t\t// TODO\r\n\t\t// return command_copyToWorktree(node, worktreeView.getRootNodes(), true).then(() => { worktreeView.refresh() })\r\n\t\treturn vscode.window.showWarningMessage('not yet implemented')\r\n\r\n\t})\r\n\tvscode.commands.registerCommand('multi-branch-checkout.stageFile', (node: WorktreeFile) => {\r\n\t\treturn command_stageFiles(node, 'stage').then(() => { worktreeView.refresh() })\r\n\t})\r\n\tvscode.commands.registerCommand('multi-branch-checkout.unstageFile', (node: WorktreeFile) => {\r\n\t\treturn command_stageFiles(node, 'unstage').then(() => { worktreeView.refresh() })\r\n\t})\r\n}\r\n\r\nfunction command_copyToWorktree(node: WorktreeFile, rootNodes: WorktreeRoot[], move = false) {\r\n\tvalidateUri(node)\r\n\r\n\tconst rootNodeIds: vscode.QuickPickItem[] = []\r\n\tfor (const n of rootNodes) {\r\n\t\tif (!n.label) {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tif (n.uri === node.getRepoUri()) {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\trootNodeIds.push({\r\n\t\t\tlabel: n.label?.toString(),\r\n\t\t\tdescription: \"$(repo) path: \" + n.uri.fsPath\r\n\t\t})\r\n\t}\r\n\tlet moveTo: WorktreeRoot | undefined = undefined\r\n\tlet moveToUri: vscode.Uri | undefined = undefined\r\n\r\n\treturn vscode.window.showQuickPick(rootNodeIds, { placeHolder: 'Select target worktree' })\r\n\t\t.then((r) => {\r\n\t\t\tconsole.log('r1=' + JSON.stringify(r))\r\n\t\t\tmoveTo = rootNodes.find(n => n.label?.toString() == r?.label)\r\n\t\t\tif (!moveTo) {\r\n\t\t\t\tthrow new Error('Failed to find target worktree: ' + r?.label)\r\n\t\t\t}\r\n\t\t\tmoveToUri = vscode.Uri.joinPath(moveTo!.uri, node.uri!.fsPath.replace(node.getRepoUri().fsPath, ''))\r\n\t\t\tconsole.log('moveToUri=' + moveToUri)\r\n\t\t\tif (!moveToUri) {\r\n\t\t\t\tthrow new Error('Failed to create target file path: ' + moveToUri)\r\n\t\t\t}\r\n\t\t\tconsole.log('copying ' + node.uri?.fsPath + ' to ' + moveToUri.fsPath)\r\n\t\t\t// copy file\r\n\t\t\treturn vscode.workspace.fs.copy(node.uri!, moveToUri, { overwrite: true })\r\n\t\t})\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('r2=' + JSON.stringify(r,null,2))\r\n\t\t\tconsole.log('successfully copied file')\r\n\t\t\tif (move) {\r\n\t\t\t\t// delete original file (move only)\r\n\t\t\t\treturn git.spawn(['rm', node.uri?.fsPath], { cwd: node.getRepoUri().fsPath })\r\n\t\t\t}\r\n\t\t\treturn Promise.resolve('copy only')\r\n\t\t}).then((r: any) => {\r\n\t\t\tconsole.log('r4=' + JSON.stringify(r,null,2))\r\n\t\t\tif (r == 'copy only') {\r\n\t\t\t\treturn moveToUri\r\n\t\t\t}\r\n\t\t\tconsole.log('r=' + JSON.stringify(r,null,2))\r\n\t\t\tconsole.log('successfully moved ' + node.uri?.fsPath + ' to ' + moveTo!.uri.fsPath)\r\n\t\t\treturn moveToUri\r\n\t\t}, (e: any) => {\r\n\t\t\tconst moveType = move ? 'move' : 'copy'\r\n\t\t\tif (e.stderr) {\r\n\t\t\t\tconsole.error('error: ' + e.stderr)\r\n\r\n\t\t\t\tthrow new Error('Failed to ' + moveType + ' file: ' + e.stderr)\r\n\t\t\t}\r\n\t\t\tconsole.error('error: ' + e.stderr)\r\n\t\t\tthrow new Error('Failed to move ' + moveType + ' : ' + e.stderr)\r\n\t\t})\r\n}\r\n\r\nfunction command_patchToWorktree(node: WorktreeFile, rootNodes: WorktreeRoot[], move = false) {\r\n\tvalidateUri(node)\r\n\r\n\t// first, select a target worktree via a prompt\r\n\t// second, create a patch file against merge-base\r\n\t// third, apply the patch to the target worktree\r\n\t// fourth, (move only) remove the original file from the source worktree\r\n\r\n\tconst rootNodeIds: vscode.QuickPickItem[] = []\r\n\tfor (const n of rootNodes) {\r\n\t\tif (!n.label) {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tif (n.uri === node.getRepoUri()) {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\trootNodeIds.push({\r\n\t\t\tlabel: n.label?.toString(),\r\n\t\t\tdescription: \"$(repo) path: \" + n.uri.fsPath\r\n\t\t})\r\n\t}\r\n\tlet moveTo: WorktreeRoot | undefined = undefined\r\n\r\n\t// first, select a target worktree via a prompt\r\n\treturn vscode.window.showQuickPick(rootNodeIds, { placeHolder: 'Select target worktree' })\r\n\t\t.then((r) => {\r\n\t\t\tconsole.log('r1=' + JSON.stringify(r))\r\n\t\t\tmoveTo = rootNodes.find(n => n.label?.toString() == r?.label)\r\n\t\t\tif (!moveTo) {\r\n\t\t\t\tthrow new Error('Failed to find target worktree: ' + r?.label)\r\n\t\t\t}\r\n\t\t\t// create patch\r\n\t\t\treturn git.spawn(['diff', '-p', '--merge-base', '--fork-point', '--', node.uri?.fsPath], { cwd: node.getRepoUri().fsPath })\r\n\t\t})\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('r2=' + JSON.stringify(r,null,2))\r\n\t\t\t// apply patch\r\n\t\t\treturn git.spawn(['apply', '-'], { cwd: moveTo!.uri.fsPath, stdin: r.stdout })\r\n\t\t}).then((r: any) => {\r\n\t\t\tconsole.log('r3=' + JSON.stringify(r,null,2))\r\n\t\t\tconsole.log('successfully applied patch')\r\n\t\t\tif (move) {\r\n\t\t\t\t// delete original file (move only)\r\n\t\t\t\treturn git.spawn(['rm', node.uri?.fsPath], { cwd: node.getRepoUri().fsPath })\r\n\t\t\t}\r\n\t\t\treturn Promise.resolve('copy only')\r\n\t\t}).then((r: any) => {\r\n\t\t\tconsole.log('r4=' + JSON.stringify(r,null,2))\r\n\t\t\tif (r == 'copy only') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tconsole.log('r=' + JSON.stringify(r,null,2))\r\n\t\t\tconsole.log('successfully moved ' + node.uri?.fsPath + ' to ' + moveTo!.uri.fsPath)\r\n\t\t}, (e: any) => {\r\n\r\n\t\t\tif (e.stderr) {\r\n\t\t\t\tconsole.error('error: ' + e.stderr)\r\n\t\t\t\tthrow new Error('Failed to move file: ' + e.stderr)\r\n\t\t\t}\r\n\t\t})\r\n\t\t// .then((r: any) => {\r\n\t\t// \tconsole.log('r=' + JSON.stringify(r,null,2))\r\n\t\t// \treturn vscode.workspace.fs.writeFile(patchFile, Buffer.from(r.stdout))\r\n\t\t// })\r\n\t\t// .then(() => {\r\n\t\t// \treturn git.spawn(['apply', patchFile.fsPath], { cwd: node.getRepoUri().fsPath })\r\n\t\t// })\r\n\t\t// .then((r: any) => {\r\n\t\t// \tconsole.log('r=' + JSON.stringify(r,null,2))\r\n\t\t// \treturn vscode.workspace.fs.delete(patchFile)\r\n\t\t// })\r\n}\r\n\r\nfunction command_stageFiles (node: WorktreeFile | WorktreeFileGroup, action: 'stage' | 'unstage') {\r\n\tvalidateUri(node)\r\n\tif (!node.uri) {\r\n\t\tthrow new Error('Failed to stage file - invalid filepath (uri=' + node.uri + ')')\r\n\t}\r\n\tconst addList: string[] = []\r\n\tif (node instanceof WorktreeFile) {\r\n\t\taddList.push(node.uri.fsPath)\r\n\t} else {\r\n\t\tfor (const child of node.children) {\r\n\t\t\tif (child instanceof WorktreeFile && child.uri) {\r\n\t\t\t\taddList.push(child.uri.fsPath)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlet gitAction = 'add'\r\n\tif (action == 'unstage') {\r\n\t\tgitAction = 'reset'\r\n\t}\r\n\treturn git.spawn([gitAction, ...addList], { cwd: node.getRepoUri().fsPath })\r\n}\r\n\r\nfunction validateUri(node: WorktreeFile | WorktreeFileGroup) {\r\n\tif (node.uri) {\r\n\t\treturn true\r\n\t}\r\n\tthrow new Error('Uri is undefined for node.id:' + node.id)\r\n}\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-extra-semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "D:\\multi-branch-checkout\\src\\gitFunctions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 4,
        "column": 7,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 4,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 45,
        "column": 8,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 61,
        "endColumn": 5
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 45,
        "column": 25,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 46,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 45,
        "column": 25,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 45,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 45,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 45,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 46,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 46,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stdout on an `any` value.",
        "line": 47,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 47,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 48,
        "column": 10,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 48,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 48,
        "column": 28,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 48,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stdout on an `any` value.",
        "line": 48,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 48,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 53,
        "column": 67,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 53,
        "endColumn": 82
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 55,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 55,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 56,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 56,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 57,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 57,
        "endColumn": 60
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 35,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 14,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Uri, workspace } from 'vscode'\r\nimport { WorktreeFile } from './worktreeView'\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst git = require('@npmcli/git')\r\n\r\n\r\n// https://github.com/microsoft/vscode/blob/b87039d5e2380e888ec471f427df68c12e0463ec/extensions/git/src/uri.ts#L23\r\n\r\nexport interface GitUriParams {\r\n\tpath: string;\r\n\tref: string;\r\n\tsubmoduleOf?: string;\r\n}\r\n\r\nexport interface GitUriOptions {\r\n\tscheme?: string;\r\n\treplaceFileExtension?: boolean;\r\n\tsubmoduleOf?: string;\r\n}\r\n\r\nexport function toGitUri(uri: Uri, ref: string, options: GitUriOptions = {}): Uri {\r\n\tconst params: GitUriParams = {\r\n\t\tpath: uri.fsPath,\r\n\t\tref\r\n\t}\r\n\r\n\tif (options.submoduleOf) {\r\n\t\tparams.submoduleOf = options.submoduleOf\r\n\t}\r\n\r\n\tlet path = uri.path\r\n\r\n\tif (options.replaceFileExtension) {\r\n\t\tpath = `${path}.git`\r\n\t} else if (options.submoduleOf) {\r\n\t\tpath = `${path}.diff`\r\n\t}\r\n\r\n\treturn uri.with({ scheme: options.scheme ?? 'git', path, query: JSON.stringify(params) })\r\n}\r\n\r\nexport async function getMergeBaseGitUri(node: WorktreeFile) {\r\n\t// TODO default branch\r\n\tconsole.log('getMergeBaseGitUri node.id=' + node.id + '; repoUri=' + node.getRepoUri().fsPath)\r\n\tconst uri: Uri = await git.spawn(['merge-base', '--fork-point', 'HEAD'], { cwd: node.getRepoUri().fsPath })\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('mergeBase=\"' + r.stdout + '\"')\r\n\t\t\tconst mergeBaseCommit = r.stdout.trim()\r\n\t\t\tconsole.log('mergeBaseCommit=' + mergeBaseCommit)\r\n\t\t\t// gitUri's only work from the workspace root and not the work tree\r\n\t\t\t// but since we're compare to a commit ref we can use the workspace root\r\n\t\t\tconst workspaceUri = workspace.workspaceFolders?.[0].uri ?? node.getRepoUri()\r\n\t\t\treturn toGitUri(Uri.joinPath(workspaceUri, node.relativePath), mergeBaseCommit)\r\n\t\t}, (e: any) => {\r\n\t\t\tif (e.stderr) {\r\n\t\t\t\tconsole.error('Failed to get merge base: ' + e.stderr)\r\n\t\t\t\tthrow new Error('Failed to get merge base: ' + e.stderr)\r\n\t\t\t}\r\n\t\t\tconsole.error('Failed to get merge base: ' + e)\r\n\t\t\tthrow e\r\n\t\t})\r\n\treturn uri\r\n}\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-extra-semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "D:\\multi-branch-checkout\\src\\test\\extension.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-extra-semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "D:\\multi-branch-checkout\\src\\worktreeDecorator.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'updateActiveEditor' has no 'await' expression.",
        "line": 17,
        "column": 2,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 17,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async method 'provideFileDecoration' has no 'await' expression.",
        "line": 29,
        "column": 2,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 29,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 44,
        "column": 35,
        "nodeType": "CallExpression",
        "messageId": "unsafeReturn",
        "endLine": 44,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// https://stackoverflow.com/questions/74449432/how-to-add-and-select-color-for-nodes-tree-view-items-in-explorer-view-in-my-vsc\r\n\r\nimport { CancellationToken, Disposable, Event, EventEmitter, FileDecoration, FileDecorationProvider, ProviderResult, Tab, TabInputText, TerminalProfileProvider, ThemeColor, Uri, window } from \"vscode\"\r\n\r\nexport class TreeFileDecorationProvider implements FileDecorationProvider {\r\n\r\n\tprivate disposables: Array<Disposable> = []\r\n\r\n\tprivate readonly _onDidChangeFileDecorations: EventEmitter<Uri | Uri[]> = new EventEmitter< Uri | Uri[]>()\r\n\treadonly onDidChangeFileDecorations: Event<Uri | Uri[]> = this._onDidChangeFileDecorations.event\r\n\r\n\tconstructor() {\r\n\t\tthis.disposables = []\r\n\t\tthis.disposables.push(window.registerFileDecorationProvider(this))\r\n\t}\r\n\r\n\tasync updateActiveEditor(activeTab: Tab): Promise<void> {\r\n\r\n\t\tif (activeTab.input instanceof TabInputText)\r\n\t\t\tthis._onDidChangeFileDecorations.fire(activeTab.input.uri)\r\n\r\n\t\t// filter to get only non-activeTabs\r\n\t\tactiveTab.group.tabs.map( tab => {\r\n\t\tif (!tab.isActive && tab.input instanceof TabInputText)\r\n\t\t\tthis._onDidChangeFileDecorations.fire(tab.input.uri)\r\n\t})\r\n}\r\n\r\n\tasync provideFileDecoration(uri: Uri): Promise<FileDecoration | undefined | null> {\r\n\t\tconst activeEditor = window.activeTextEditor?.document.uri\r\n\t\tif (uri.fsPath === activeEditor?.fsPath) {\r\n\t\t\treturn {\r\n\t\t\t\tbadge: \"⇐\",\r\n\t\t\t\tcolor: new ThemeColor(\"charts.red\"),\r\n\t\t\t\t// color: new vscode.ThemeColor(\"tab.activeBackground\"),\r\n\t\t\t\t// tooltip: \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn null  // to get rid of the custom fileDecoration\r\n\t}\r\n\r\n\tdispose() {\r\n\t\tthis.disposables.forEach((d) => d.dispose())\r\n\t}\r\n}\r\n\r\n\r\n\r\n// define the decoration provider\r\nexport class TreeItemDecorationProvider implements FileDecorationProvider {\r\n    provideFileDecoration(uri: Uri, token: CancellationToken): ProviderResult<FileDecoration> {\r\n\r\n        // https://code.visualstudio.com/api/references/theme-color#lists-and-trees\r\n\t\tconst decoration: FileDecoration = {}\r\n        if (uri.scheme.startsWith('worktree')) {\r\n            decoration.color = new ThemeColor('list.warningForeground')\r\n\t\t\t// decoration.badge = 'treeview-badge'\r\n        }\r\n\t\treturn undefined\r\n    }\r\n}\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-extra-semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "D:\\multi-branch-checkout\\src\\worktreeView.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 6,
        "column": 7,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 6,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 109,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 121,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 109,
        "column": 10,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 110,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 109,
        "column": 10,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 109,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 109,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 109,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 110,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 110,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 114,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 114,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 115,
        "column": 72,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 115,
        "endColumn": 78
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 119,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 119,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                3524,
                3524
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'this.label!' may use Object's default stringification format ('[object Object]') when stringified.",
        "line": 143,
        "column": 33,
        "nodeType": "TSNonNullExpression",
        "messageId": "baseToString",
        "endLine": 143,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'this.label!' may use Object's default stringification format ('[object Object]') when stringified.",
        "line": 161,
        "column": 33,
        "nodeType": "TSNonNullExpression",
        "messageId": "baseToString",
        "endLine": 161,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `TreeItemLabel`.",
        "line": 186,
        "column": 101,
        "nodeType": "MemberExpression",
        "messageId": "invalid",
        "endLine": 186,
        "endColumn": 111
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'this.label!' may use Object's default stringification format ('[object Object]') when stringified.",
        "line": 235,
        "column": 33,
        "nodeType": "TSNonNullExpression",
        "messageId": "baseToString",
        "endLine": 235,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `TreeItemLabel`.",
        "line": 243,
        "column": 101,
        "nodeType": "MemberExpression",
        "messageId": "invalid",
        "endLine": 243,
        "endColumn": 111
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `TreeItemLabel`.",
        "line": 251,
        "column": 101,
        "nodeType": "MemberExpression",
        "messageId": "invalid",
        "endLine": 251,
        "endColumn": 111
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 307,
        "column": 8,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 315,
        "endColumn": 5
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 307,
        "column": 32,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 308,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 307,
        "column": 32,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 307,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 307,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 307,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 308,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 308,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stdout on an `any` value.",
        "line": 309,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 309,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `unknown`.",
        "line": 345,
        "column": 66,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 345,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 356,
        "column": 44,
        "nodeType": "CallExpression",
        "messageId": "unsafeReturn",
        "endLine": 356,
        "endColumn": 64
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 366,
        "column": 8,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 397,
        "endColumn": 5
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 366,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 367,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 366,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 366,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 366,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 366,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 367,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 367,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 368,
        "column": 10,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 368,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 368,
        "column": 22,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 368,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stdout on an `any` value.",
        "line": 368,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 368,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .length on an `any` value.",
        "line": 370,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 370,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 371,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 371,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access [i] on an `any` value.",
        "line": 371,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 371,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 372,
        "column": 19,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 372,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .substring on an `any` value.",
        "line": 372,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 372,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 375,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 375,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 375,
        "column": 25,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 375,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 375,
        "column": 25,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 375,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .substring on an `any` value.",
        "line": 375,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 375,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .trim on an `any` value.",
        "line": 375,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 375,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 376,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 376,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 376,
        "column": 27,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 376,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 376,
        "column": 27,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 376,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .substring on an `any` value.",
        "line": 376,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 376,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .trim on an `any` value.",
        "line": 376,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 376,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 377,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 377,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 377,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 377,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .substring on an `any` value.",
        "line": 377,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 377,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 383,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 383,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 383,
        "column": 107,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 383,
        "endColumn": 118
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 390,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 390,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string`.",
        "line": 390,
        "column": 96,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 390,
        "endColumn": 109
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 399,
        "column": 2,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 399,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 419,
        "column": 43,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 419,
        "endColumn": 77,
        "fix": {
          "range": [
            12390,
            12391
          ],
          "text": ""
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .code on an `any` value.",
        "line": 431,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 431,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 438,
        "column": 42,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 438,
        "endColumn": 76,
        "fix": {
          "range": [
            13006,
            13007
          ],
          "text": ""
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .code on an `any` value.",
        "line": 450,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 450,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 459,
        "column": 8,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 460,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 459,
        "column": 8,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 459,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 459,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 459,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 460,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 460,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 463,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 463,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 464,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 464,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 465,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 465,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                14027,
                14027
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 465,
        "column": 70,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 465,
        "endColumn": 76
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 503,
        "column": 2,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 516,
        "endColumn": 5
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 503,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 504,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 503,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 503,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 503,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 503,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 504,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 504,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 506,
        "column": 4,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 506,
        "endColumn": 97,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                15457,
                15457
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 509,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 509,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 510,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 510,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                15649,
                15649
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .stderr on an `any` value.",
        "line": 510,
        "column": 70,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 510,
        "endColumn": 76
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 514,
        "column": 4,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 514,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                15781,
                15781
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 545,
        "column": 8,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 545,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 545,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 545,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 546,
        "column": 2,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 546,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                16754,
                16754
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 550,
        "column": 8,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 550,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 550,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 550,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 551,
        "column": 2,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 551,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                16963,
                16963
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 555,
        "column": 8,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 555,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 555,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 555,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 556,
        "column": 2,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 556,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                17166,
                17166
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 561,
        "column": 8,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 561,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .spawn on an `any` value.",
        "line": 561,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 561,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 562,
        "column": 2,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 562,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                17407,
                17407
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/restrict-template-expressions",
        "severity": 2,
        "message": "Invalid type \"string | TreeItemLabel | undefined\" of template literal expression.",
        "line": 562,
        "column": 47,
        "nodeType": "MemberExpression",
        "messageId": "invalidType",
        "endLine": 562,
        "endColumn": 57
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `Promise<Uri>`.",
        "line": 568,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 568,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-base-to-string",
        "severity": 2,
        "message": "'mergeBaseGitUri' will use Object's default stringification format ('[object Object]') when stringified.",
        "line": 568,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "baseToString",
        "endLine": 568,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 610,
        "column": 4,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 611,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 610,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 611,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 611,
        "column": 6,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 611,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of an `any` typed value.",
        "line": 614,
        "column": 4,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 615,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of an `any` typed value.",
        "line": 614,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 615,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .then on an `any` value.",
        "line": 615,
        "column": 6,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 615,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `Uri`.",
        "line": 665,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 665,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `Uri`.",
        "line": 665,
        "column": 65,
        "nodeType": "MemberExpression",
        "messageId": "invalid",
        "endLine": 665,
        "endColumn": 83
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `TreeItemLabel`.",
        "line": 666,
        "column": 35,
        "nodeType": "MemberExpression",
        "messageId": "invalid",
        "endLine": 666,
        "endColumn": 69
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 672,
        "column": 3,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 672,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": {
              "range": [
                22618,
                22618
              ],
              "text": "void "
            },
            "desc": "Add void operator to ignore."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/restrict-plus-operands",
        "severity": 2,
        "message": "Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: `any`, `boolean`, `null`, `RegExp`, `undefined`. Got `unknown`.",
        "line": 712,
        "column": 68,
        "nodeType": "Identifier",
        "messageId": "invalid",
        "endLine": 712,
        "endColumn": 69
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 6,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 6,
        "endColumn": 35,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 102,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import * as vscode from 'vscode'\r\nimport { basename } from 'path'\r\nimport { Uri } from 'vscode'\r\nimport { getMergeBaseGitUri } from './gitFunctions'\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst git = require('@npmcli/git')\r\n\r\nexport type WorktreeNode = WorktreeRoot | WorktreeFileGroup | WorktreeFile | EmptyFileGroup\r\nconst parents = new Map<string, WorktreeNode>()\r\nconst tree: WorktreeRoot[] = []\r\nconst fileMap = new Map<string, WorktreeNode>()\r\n\r\nenum FileGroup {\r\n\tUntracked = 'Untracked',\r\n\tChanges = 'Changes',\r\n\tStaged = 'Staged',\r\n\tCommitted = 'Committed',\r\n}\r\n\r\nclass FileGroupError extends Error {\r\n\tconstructor (message: string) {\r\n\t\tsuper(message)\r\n\t\tthis.name = 'FileGroupError'\r\n\t}\r\n}\r\n\r\nclass WorktreeNotFoundError extends Error {\r\n\tconstructor (message: string) {\r\n\t\tsuper(message)\r\n\t\tthis.name = 'WorktreeNotFoundError'\r\n\t}\r\n}\r\n\r\nexport class WorktreeRoot extends vscode.TreeItem {\r\n\tprivate committed: WorktreeFileGroup\r\n\tprivate staged: WorktreeFileGroup\r\n\tprivate changes: WorktreeFileGroup\r\n\tprivate untracked: WorktreeFileGroup\r\n\tprivate _locked: boolean = false\r\n\r\n\tconstructor(public readonly uri: vscode.Uri, branch: string) {\r\n\t\tsuper(basename(uri.fsPath), vscode.TreeItemCollapsibleState.Collapsed)\r\n\t\tthis.label = basename(uri.fsPath)\r\n\t\tthis.id = uri.fsPath\r\n\t\tthis.contextValue = 'WorktreeRoot'\r\n\t\tthis.description = branch\r\n\t\tthis.resourceUri = uri\r\n\t\tif (vscode.workspace.workspaceFolders && this.uri.fsPath == vscode.workspace.workspaceFolders[0].uri.fsPath) {\r\n\t\t\tthis.iconPath = new vscode.ThemeIcon('root-folder-opened')\r\n\t\t\tthis.contextValue = 'WorktreePrimary'\r\n\t\t} else {\r\n\t\t\tthis.iconPath = new vscode.ThemeIcon('repo')\r\n\t\t}\r\n\t\tthis.committed = new WorktreeFileGroup(this, FileGroup.Committed)\r\n\t\tthis.staged = new WorktreeFileGroup(this, FileGroup.Staged)\r\n\t\tthis.changes = new WorktreeFileGroup(this, FileGroup.Changes)\r\n\t\tthis.untracked = new WorktreeFileGroup(this, FileGroup.Untracked)\r\n\t\tthis.setLocked(this._locked)\r\n\r\n\t\ttree.push(this)\r\n\t}\r\n\r\n\tgetParent () {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\tget children () {\r\n\t\tconst c: WorktreeNode[] = []\r\n\t\tif (this.committed.children.length > 0) {\r\n\t\t\tc.push(this.committed)\r\n\t\t}\r\n\t\tif (this.staged.children.length > 0) {\r\n\t\t\tc.push(this.staged)\r\n\t\t}\r\n\t\tif (this.changes.children.length > 0) {\r\n\t\t\tc.push(this.changes)\r\n\t\t}\r\n\t\tif (this.untracked.children.length > 0) {\r\n\t\t\tc.push(this.untracked)\r\n\t\t}\r\n\t\tif (c.length == 0) {\r\n\t\t\tc.push(new EmptyFileGroup(this))\r\n\t\t}\r\n\t\treturn c\r\n\t}\r\n\r\n\tgetFileGroupNode(state: FileGroup) {\r\n\t\tswitch (state) {\r\n\t\t\tcase FileGroup.Committed:\r\n\t\t\t\treturn this.committed\r\n\t\t\tcase FileGroup.Staged:\r\n\t\t\t\treturn this.staged\r\n\t\t\tcase FileGroup.Changes:\r\n\t\t\t\treturn this.changes\r\n\t\t\tcase FileGroup.Untracked:\r\n\t\t\t\treturn this.untracked\r\n\t\t}\r\n\t}\r\n\r\n\tsetLocked (isLocked = true) {\r\n\t\tif (this.contextValue == 'WorktreeRootPrimary') {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\t\tthis._locked = isLocked\r\n\t\tthis.contextValue = 'WorktreeRoot' + (isLocked ? 'Locked' : 'Unlocked')\r\n\t\tconst action = isLocked ? 'lock' : 'unlock'\r\n\t\tconst emoji = isLocked ? '🔒' : '🔓'\r\n\r\n\t\treturn git.spawn(['worktree', action, this.uri.fsPath], { cwd: this.uri.fsPath })\r\n\t\t\t.then(() => {\r\n\t\t\t\tconsole.log('successfully ' + action + 'ed ' + emoji + ' worktree: ' + this.uri.fsPath)\r\n\t\t\t}, (e: any) => {\r\n\t\t\t\tlet errText = 'Failed to ' + action + ' worktree: ' + e\r\n\t\t\t\tif (e.stderr) {\r\n\t\t\t\t\terrText = 'Failed to ' + action + ' ' + emoji + ' worktree: ' + e.stderr\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tconsole.error(errText)\r\n\t\t\t\tvscode.window.showErrorMessage(errText)\r\n\t\t\t\tthrow e\r\n\t\t\t})\r\n\t}\r\n\r\n\tget locked () {\r\n\t\treturn this._locked\r\n\t}\r\n\r\n}\r\n\r\nclass EmptyFileGroup extends vscode.TreeItem {\r\n\tpublic readonly uri: vscode.Uri | undefined = undefined\r\n\tpublic readonly children: WorktreeNode[] = []\r\n\tconstructor (parent: WorktreeRoot) {\r\n\t\tsuper('')\r\n\t\tthis.description = 'No modified files detected'\r\n\t\tthis.collapsibleState = vscode.TreeItemCollapsibleState.None\r\n\t\tthis.id = parent.id + '#empty'\r\n\t\tthis.contextValue = 'WorktreeFileGroupEmpty'\r\n\t\tparents.set(this.id, parent)\r\n\t}\r\n\r\n\tgetParent () {\r\n\t\treturn parents.get(this.id ?? this.label!.toString())\r\n\t}\r\n}\r\n\r\nexport class WorktreeFileGroup extends vscode.TreeItem {\r\n\tpublic children: WorktreeNode[] = []\r\n\tpublic uri: vscode.Uri | undefined = undefined\r\n\tprivate readonly _group: FileGroup\r\n\tconstructor(parent: WorktreeRoot, group: FileGroup) {\r\n\t\tsuper(group, vscode.TreeItemCollapsibleState.Collapsed)\r\n\t\tthis._group = group\r\n\t\tthis.label = this.groupLabel(group)\r\n\t\tthis.id =  parent.id + '#' + group\r\n\t\tthis.contextValue = 'WorktreeFileGroup' + group\r\n\t\tparents.set(this.id, parent)\r\n\t}\r\n\r\n\tgetParent () {\r\n\t\treturn parents.get(this.id ?? this.label!.toString())\r\n\t}\r\n\r\n\tprivate groupLabel (group: FileGroup) {\r\n\t\tswitch (group) {\r\n\t\t\tcase FileGroup.Committed:\r\n\t\t\t\treturn 'Committed Changes'\r\n\t\t\tcase FileGroup.Staged:\r\n\t\t\t\treturn 'Staged Changes'\r\n\t\t\tcase FileGroup.Changes:\r\n\t\t\t\treturn 'Changes'\r\n\t\t\tcase FileGroup.Untracked:\r\n\t\t\t\treturn 'Untracked Changes'\r\n\t\t}\r\n\t}\r\n\r\n\tgroup = () => {\r\n\t\treturn this._group\r\n\t}\r\n\r\n\tgetRepoUri () {\r\n\t\tconst parent = this.getParent()\r\n\t\tif (parent?.uri) {\r\n\t\t\treturn parent.uri\r\n\t\t}\r\n\t\tthrow new WorktreeNotFoundError('Worktree root directory not found for ' + this.id + ' (label=' + this.label + '; uri=' + this.uri?.fsPath + ')')\r\n\t}\r\n}\r\n\r\nexport class WorktreeFile extends vscode.TreeItem {\r\n\t// public children: WorktreeNode[] = []\r\n\tpublic children: WorktreeNode[] = []\r\n\tpublic uri: vscode.Uri | undefined = undefined\r\n\tpublic state: string | undefined = undefined\r\n\tpublic relativePath: string\r\n\r\n\tconstructor(uri: vscode.Uri, parent: WorktreeFileGroup, state: string) {\r\n\t\tsuper(basename(uri.fsPath), vscode.TreeItemCollapsibleState.None)\r\n\t\tthis.label = basename(uri.fsPath)\r\n\t\tthis.id = uri.fsPath + '#' + parent.group()\r\n\t\tthis.contextValue = 'WorktreeFile' + parent.group()\r\n\t\tthis.uri = uri\r\n\t\tthis.resourceUri = uri\r\n\t\tconsole.log('filemap.set uri=' + uri.fsPath + '; id=' + this.id)\r\n\t\tfileMap.set(this.resourceUri.fsPath, this)\r\n\t\tthis.relativePath = uri.fsPath.replace(parent.getRepoUri().fsPath, '').substring(1)\r\n\t\t// this.resourceUri = vscode.Uri.parse(uri.toString().replace('file:///', 'worktree:///'))\r\n\t\tthis.tooltip = uri.fsPath\r\n\t\tthis.state = state\r\n\t\tif (this.state == 'D') {\r\n\t\t\tthis.label = '~~~' + this.label + '~~~'\r\n\t\t}\r\n\r\n\t\tconst wt = parent.getParent()\r\n\t\tif (wt?.uri) {\r\n\t\t\tthis.description = uri.fsPath\r\n\t\t\tif (this.description.startsWith(wt.uri.fsPath)) {\r\n\t\t\t\tthis.description = this.description.substring(wt.uri.fsPath.length)\r\n\t\t\t}\r\n\t\t\tif (this.description.endsWith(this.label)) {\r\n\t\t\t\tthis.description = this.description.substring(0, this.description.length - this.label.length)\r\n\t\t\t}\r\n\t\t\tif (this.description.startsWith('/') || this.description.startsWith('\\\\')) {\r\n\t\t\t\tthis.description = this.description.substring(1)\r\n\t\t\t}\r\n\t\t\tif (this.description.endsWith('/') || this.description.endsWith('\\\\')) {\r\n\t\t\t\tthis.description = this.description.substring(0, this.description.length - 1)\r\n\t\t\t}\r\n\t\t}\r\n\t\tparents.set(this.id, parent)\r\n\t\tparent.children.push(this)\r\n\t}\r\n\r\n\tgetParent () {\r\n\t\treturn parents.get(this.id ?? this.label!.toString())\r\n\t}\r\n\r\n\tgetRepoUri () {\r\n\t\tconst grandparent = this.getRepoNode()\r\n\t\tif (grandparent?.uri) {\r\n\t\t\treturn grandparent.uri\r\n\t\t}\r\n\t\tthrow new WorktreeNotFoundError('Worktree root directory not found for ' + this.id + ' (label=' + this.label + '; uri=' + this.uri?.fsPath + ')')\r\n\t}\r\n\r\n\tgetRepoNode () {\r\n\t\tconst grandparent = this.getParent()?.getParent()\r\n\t\tif (grandparent) {\r\n\t\t\treturn grandparent\r\n\t\t}\r\n\t\tthrow new WorktreeNotFoundError('Worktree root directory not found for ' + this.id + ' (label=' + this.label + '; uri=' + this.uri?.fsPath + ')')\r\n\t}\r\n}\r\n\r\nexport function getNode () {\r\n\r\n}\r\n\r\nclass tdp implements vscode.TreeDataProvider<WorktreeNode> {\r\n\tprivate _onDidChangeTreeData: vscode.EventEmitter<WorktreeNode| WorktreeNode[] | undefined | null | void>\r\n\r\n\tconstructor() {\r\n\t\tthis._onDidChangeTreeData = new vscode.EventEmitter<WorktreeNode | WorktreeNode[] | undefined | null | void>()\r\n\t}\r\n\r\n\tget onDidChangeTreeData() {\r\n\t\treturn this._onDidChangeTreeData.event\r\n\t}\r\n\r\n\tgetTreeItem (element: WorktreeNode): vscode.TreeItem {\r\n\t\treturn element as vscode.TreeItem\r\n\t}\r\n\r\n\tgetChildren (element: WorktreeNode): WorktreeNode[] {\r\n\t\tif (!element) {\r\n\t\t\treturn tree\r\n\t\t}\r\n\t\treturn element.children\r\n\t}\r\n\r\n\tgetParent (element: WorktreeNode): WorktreeNode | undefined {\r\n\t\treturn element.getParent()\r\n\t}\r\n\r\n\tupdateTree () {\r\n\t\treturn this._onDidChangeTreeData.fire()\r\n\t}\r\n}\r\n\r\nfunction emptyTree(children: WorktreeNode[]) {\r\n\twhile (children.length > 0) {\r\n\t\tconst c = children.pop()\r\n\t\tif (c) {\r\n\t\t\temptyTree(c.children)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function initWorktree() {\r\n\temptyTree(tree)\r\n\r\n\tif (!vscode.workspace.workspaceFolders || vscode.workspace.workspaceFolders.length === 0) {\r\n\t\tconsole.warn('No workspace folder found')\r\n\t\treturn\r\n\t}\r\n\r\n\tconst trees: string[] = await git.spawn(['worktree', 'list', '--porcelain', '-z'], {cwd: vscode.workspace.workspaceFolders[0].uri.fsPath })\r\n\t\t.then((r: any) => {\r\n\t\t\tconst stdout = r.stdout as string\r\n\t\t\tconst trees = stdout.split('\\0\\0')\r\n\t\t\treturn trees\r\n\t\t}, (e: any) => {\r\n\t\t\tconsole.error('e=' + JSON.stringify(e,null,2))\r\n\t\t\tthrow e\r\n\t\t})\r\n\r\n\tfor (const t of trees) {\r\n\t\tif (t == '') {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tconst lines = t.trim().split('\\0')\r\n\t\tif (lines.length < 3) {\r\n\t\t\tconsole.error('Invalid worktree=' + t)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tconst worktreePath = lines[0].split(' ')[1]\r\n\t\tconst branch = lines[2].split(' ')[1]\r\n\t\tconst locked = lines[3] === 'locked'\r\n\r\n\t\tconst uri = vscode.Uri.file(worktreePath)\r\n\r\n\t\tconst dirExist = await vscode.workspace.fs.stat(uri)\r\n\t\t\t.then((s: vscode.FileStat) => {\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\treturn false\r\n\t\t\t\t\tconsole.error('worktree not found: ' + uri.fsPath)\r\n\t\t\t\t}\r\n\t\t\t\tif (s.type != vscode.FileType.Directory) {\r\n\t\t\t\t\tconsole.error('worktree not a directory: ' + uri.fsPath)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\treturn true\r\n\t\t\t}, (e: unknown) => {\r\n\t\t\t\tconsole.error('worktree not found: ' + uri.fsPath + ' (e=' + e + ')')\r\n\t\t\t\treturn false\r\n\t\t\t})\r\n\t\tif (!dirExist) {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tconst worktree = vscode.workspace.asRelativePath(worktreePath)\r\n\t\t// const commit = lines[1].split(' ');\r\n\t\tconst wt = new WorktreeRoot(uri, branch)\r\n\t\t// wt.resourceUri = vscode.Uri.file(worktreePath)\r\n\t\tawait gatherWorktreeFiles(wt).then(() => wt.setLocked(locked))\r\n\t}\r\n}\r\n\r\nasync function gatherWorktreeFiles (wt: WorktreeRoot) {\r\n\tif (!wt.uri) {\r\n\t\treturn Promise.resolve()\r\n\t}\r\n\r\n\tconsole.log('git status --porcelain -z (in ' + wt.uri.fsPath + ')')\r\n\tconst p = await git.spawn(['status', '--porcelain', '-z'], {cwd: wt.uri.fsPath})\r\n\t\t.then((r: any) => {\r\n\t\t\tconst responses = r.stdout.split('\\0')\r\n\r\n\t\t\tfor (let i = 0; i < responses.length; i++) {\r\n\t\t\t\tlet response = responses[i]\r\n\t\t\t\tif (i == 0 && response.substring(2,3) != ' ') {\r\n\t\t\t\t\tresponse = ' ' + response\r\n\t\t\t\t}\r\n\t\t\t\tconst stagedState = response.substring(0, 1).trim()\r\n\t\t\t\tconst unstagedState = response.substring(1, 2).trim()\r\n\t\t\t\tconst file = response.substring(3)\r\n\t\t\t\tif (file == '') {\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stagedState != '?' && stagedState != '') {\r\n\t\t\t\t\tconst c = new WorktreeFile(vscode.Uri.joinPath(wt.uri, file), wt.getFileGroupNode(FileGroup.Staged), stagedState)\r\n\t\t\t\t}\r\n\t\t\t\tif (unstagedState != '') {\r\n\t\t\t\t\tlet group = FileGroup.Changes\r\n\t\t\t\t\tif (unstagedState == 'A' || unstagedState == '?') {\r\n\t\t\t\t\t\tgroup = FileGroup.Untracked\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst c = new WorktreeFile(vscode.Uri.joinPath(wt.uri, file), wt.getFileGroupNode(group), unstagedState)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t}, (e: any) => {\r\n\t\t\tconsole.error('uri=' + wt.uri.fsPath + '; e=' + JSON.stringify(e,null,2))\r\n\t\t\tthrow e\r\n\t\t})\r\n\tconsole.log('end gatherWorktreeFiles (p=' + p + ')')\r\n\treturn p\r\n}\r\n\r\nfunction validateUri (node: WorktreeNode) {\r\n\tif (!node.uri) {\r\n\t\tthrow new Error('Failed to unstage file - filepath not set (uri=' + node.uri + ')')\r\n\t}\r\n\treturn true\r\n}\r\n\r\nasync function command_createWorktree () {\r\n\t//display an input dialog to get the branch name\r\n\tconst branchName = await vscode.window.showInputBox({ prompt: 'Enter the branch name' })\r\n\tif (!branchName) {\r\n\t\treturn\r\n\t}\r\n\tif (!vscode.workspace.workspaceFolders) {\r\n\t\tthrow new Error('No workspace folder open')\r\n\t}\r\n\r\n\tconst worktreesDir = vscode.Uri.joinPath(vscode.workspace.workspaceFolders![0].uri, '.worktrees')\r\n\tawait vscode.workspace.fs.stat(worktreesDir)\r\n\t\t.then((s: vscode.FileStat) => {\r\n\r\n\t\t\tif (s.type == vscode.FileType.File) {\r\n\t\t\t\tthrow new Error('File exists with the name \".worktrees\", cannot create directory')\r\n\t\t\t}\r\n\t\t\tif (s.type == vscode.FileType.Directory) {\r\n\t\t\t\treturn Promise.resolve()\r\n\t\t\t}\r\n\t\t\treturn vscode.workspace.fs.createDirectory(worktreesDir)\r\n\t\t}, (e) => {\r\n\t\t\tif (e.code == 'FileNotFound') {\r\n\t\t\t\treturn vscode.workspace.fs.createDirectory(worktreesDir)\r\n\t\t\t} else {\r\n\t\t\t\tthrow e\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tconst worktreeUri = vscode.Uri.joinPath(vscode.workspace.workspaceFolders![0].uri, '.worktrees', branchName)\r\n\tconsole.log('checking if worktree exists: ' + worktreeUri.fsPath)\r\n\t// throw an error if this directory already exists\r\n\tawait vscode.workspace.fs.stat(worktreeUri)\r\n\t\t.then((s: vscode.FileStat) => {\r\n\t\t\tif (s.type == vscode.FileType.Directory) {\r\n\t\t\t\tthrow new Error('Directory already exists')\r\n\t\t\t}\r\n\t\t\tif (s.type == vscode.FileType.File) {\r\n\t\t\t\tthrow new Error('File already exists')\r\n\t\t\t}\r\n\t\t}, (e) => {\r\n\t\t\tif (e.code == 'FileNotFound') {\r\n\t\t\t\tconsole.error('receieved FileNotFound as expected (e=' + e +')')\r\n\t\t\t} else {\r\n\t\t\t\tthrow e\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t//create the worktree\r\n\tconsole.log('git worktree add -b ' + branchName + ' ' + worktreeUri.fsPath)\r\n\tawait git.spawn(['worktree', 'add', '-b', branchName, worktreeUri.fsPath], { cwd: vscode.workspace.workspaceFolders[0].uri.fsPath })\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('worktree created for branch: ' + branchName)\r\n\t\t}, (e: any) => {\r\n\t\t\tif (e.stderr) {\r\n\t\t\t\tconsole.error('Failed to create worktree: ' + e.stderr)\r\n\t\t\t\tvscode.window.showErrorMessage('Failed to create worktree: ' + e.stderr)\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error('Failed to create worktree: ' + JSON.stringify(e))\r\n\t\t\t}\r\n\t\t\tthrow e\r\n\t\t})\r\n\treturn true\r\n}\r\n\r\nasync function command_deleteWorktree (rootNode: WorktreeRoot) {\r\n\tif (rootNode.locked) {\r\n\t\tawait vscode.window.showWarningMessage('Worktree is locked and cannot be deleted')\r\n\t}\r\n\r\n\t// get count of files in the worktree\r\n\tlet count = 0\r\n\tconsole.log('command_deleteWorktree rootNode=' + rootNode.id + ' ' + rootNode.children.length)\r\n\tfor (const child of rootNode.children) {\r\n\t\tcount += child.children.length\r\n\t}\r\n\r\n\tif (count > 0) {\r\n\t\tconst proceed = await vscode.window.showWarningMessage('Worktree has modified files which have not been committed.  Delete anyway?', 'Yes', 'No')\r\n\t\t\t.then((r: 'Yes' | 'No' | undefined) => {\r\n\t\t\t\tif (r == \"No\") {\r\n\t\t\t\t\tconsole.log('User opted not to delete worktree with modified files')\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\tif (!r) {\r\n\t\t\t\t\tthrow new Error('Failed to delete worktree with modified files, no response from user')\r\n\t\t\t\t}\r\n\t\t\t\treturn true\r\n\t\t\t})\r\n\t\tif (!proceed) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\t}\r\n\tconsole.log('removing worktree ' + rootNode.id)\r\n\treturn await git.spawn(['worktree', 'remove', rootNode.uri.fsPath], { cwd: vscode.workspace.workspaceFolders![0].uri.fsPath })\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('Worktree removed successfully: ' + rootNode.uri.fsPath)\r\n\t\t\tvscode.window.showInformationMessage('Worktree removed successfully: ' + rootNode.uri.fsPath)\r\n\t\t}, (e: any) => {\r\n\t\t\tconsole.error('e=' + JSON.stringify(e, null, 2))\r\n\t\t\tif (e.stderr) {\r\n\t\t\t\tvscode.window.showErrorMessage('Failed to remove worktree: ' + e.stderr)\r\n\t\t\t\t// TODO - delete with `--force`\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tvscode.window.showErrorMessage('Failed to remove worktree: ' + e)\r\n\t\t\tthrow e\r\n\t\t})\r\n}\r\n\r\nfunction command_launchWindowForWorktree (node: WorktreeRoot) {\r\n\tvalidateUri(node)\r\n\treturn vscode.commands.executeCommand('vscode.openFolder', node.uri, { forceNewWindow: true })\r\n}\r\n\r\nfunction command_pullWorktree (node: WorktreeRoot) {\r\n\tvalidateUri(node)\r\n\treturn vscode.commands.executeCommand('git.pull', { uri: node.uri } )\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('git pull successful')\r\n\t\t})\r\n}\r\n\r\nfunction command_pushWorktree (node: WorktreeRoot) {\r\n\tvalidateUri(node)\r\n\treturn vscode.commands.executeCommand('git.push', { uri: node.uri } )\r\n\t\t.then((r: any) => {\r\n\t\t\tconsole.log('git push successful')\r\n\t\t})\r\n}\r\n\r\nasync function command_commit(node: WorktreeFileGroup) {\r\n\tconst message = await vscode.window.showInputBox({ prompt: 'Enter commit message' })\r\n\tif (!message) {\r\n\t\treturn\r\n\t}\r\n\tawait git.spawn(['commit', '-m', message], { cwd: node.getRepoUri().fsPath })\r\n\tvscode.window.showInformationMessage('Changes committed.')\r\n}\r\n\r\nasync function command_revertChanges(node: WorktreeFileGroup) {\r\n\tawait git.spawn(['checkout', '--', '.'], { cwd: node.getRepoUri().fsPath })\r\n\tvscode.window.showInformationMessage('Changes reverted.')\r\n}\r\n\r\nasync function command_revertUntracked(node: WorktreeFileGroup) {\r\n\tawait git.spawn(['clean', '-fd'], { cwd: node.getRepoUri().fsPath })\r\n\tvscode.window.showInformationMessage('Untracked files reverted.')\r\n}\r\n\r\nasync function command_revertFile(node: WorktreeFile) {\r\n\tvalidateUri(node)\r\n\tawait git.spawn(['checkout', '--', node.uri!.fsPath], { cwd: node.getRepoUri().fsPath })\r\n\tvscode.window.showInformationMessage(`File ${node.label} reverted.`)\r\n}\r\n\r\nasync function command_compareFileWithMergeBase(node: WorktreeFile) {\r\n\tconsole.log('command_compareFileWithMergeBase node.id=' + node.id)\r\n\tconst mergeBaseGitUri = getMergeBaseGitUri(node)\r\n\tconsole.log('mergeBaseGitUri=' + mergeBaseGitUri)\r\n\tawait vscode.commands.executeCommand('vscode.diff', mergeBaseGitUri, node.uri)\r\n\tconsole.log('command_compareFileWithMergeBase done')\r\n}\r\n\r\nexport class WorktreeView {\r\n\tview: vscode.TreeView<WorktreeNode>\r\n\t// _onDidChangeTreeData = new vscode.EventEmitter();\r\n\ttdp = new tdp()\r\n\r\n\tconstructor(context: vscode.ExtensionContext) {\r\n\r\n\t\tthis.view = vscode.window.createTreeView('multi-branch-checkout.worktreeView', { treeDataProvider: this.tdp, showCollapseAll: true, canSelectMany: true })\r\n\t\t// this.view.badge = { tooltip: 'Worktrees', value: 111 }\r\n\t\tthis.view.badge = undefined\r\n\t\tthis.view.title = 'Multi Branch Checkout (Worktrees)'\r\n\t\tthis.view.message = '**Multi Branch Checkout**: use this to separate commits into multiple branches more easily'\r\n\t\tthis.view.description = 'this is a description!'\r\n\t\tcontext.subscriptions.push(this.view)\r\n\r\n\t\t// ********** WorktreeView Commands ********** //\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.refresh', () => { return this.refresh() })\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.createWorktree', () => {\r\n\t\t\treturn command_createWorktree()\r\n\t\t\t\t.then(() => { return this.refresh() })\r\n\t\t})\r\n\r\n\t\t// ********** WorktreeRoot Commands ********** //\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.deleteWorktree', (node: WorktreeRoot) => {\r\n\t\t\treturn command_deleteWorktree(node)\r\n\t\t\t\t.then(() => { return this.refresh() })\r\n\t\t})\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.launchWindowForWorktree', (node: WorktreeRoot) => {\r\n\t\t\treturn command_launchWindowForWorktree(node)\r\n\t\t})\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.pullWorktree', (node: WorktreeRoot) => {\r\n\t\t\treturn command_pullWorktree(node)\r\n\t\t})\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.pushWorktree', (node: WorktreeRoot) => {\r\n\t\t\treturn command_pushWorktree(node)\r\n\t\t})\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.lockWorktree', (node: WorktreeRoot) => {\r\n\t\t\treturn node.setLocked(true)\r\n\t\t\t\t.then(this.tdp.updateTree())\r\n\t\t})\r\n\t\tvscode.commands.registerCommand('multi-branch-checkout.unlockWorktree', (node: WorktreeRoot) => {\r\n\t\t\treturn node.setLocked(false)\r\n\t\t\t\t.then(this.tdp.updateTree())\r\n\t\t})\r\n\r\n\t\t// ********** WorktreeFileGroup Commands ********** //\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.commit\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn command_commit(node)\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.revertChanges\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn command_revertChanges(node)\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.revertUntracked\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn command_revertUntracked(node)\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand('multi-branch-checkout.revertFile', (node: WorktreeFile) => {\r\n\t\t// \treturn command_revertFile(node)\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand('multi-branch-checkout.compareFileWithMergeBase', (node: WorktreeFile) => {\r\n\t\t// \treturn command_compareFileWithMergeBase(node)\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand('multi-branch-checkout.moveToWorktree', (node: WorktreeFile) => {\r\n\t\t// \treturn command_moveToWorktree(node)\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.stageChanges\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn command_stageFiles(node, 'stage').then(() => { this.refresh() })\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.unstageGroup\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn command_stageFiles(node, 'unstage').then(() => { this.refresh() })\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.revertChanges\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn vscode.window.showWarningMessage('not yet implemented')\r\n\t\t// })\r\n\t\t// vscode.commands.registerCommand(\"multi-branch-checkout.revertUntracked\", (node: WorktreeFileGroup) => {\r\n\t\t// \treturn vscode.window.showWarningMessage('not yet implemented')\r\n\t\t// })\r\n\r\n\t\t// vscode.window.registerFileDecorationProvider(new TreeItemDecorationProvider())\r\n\r\n\t\tthis.view.onDidChangeSelection (async (e: vscode.TreeViewSelectionChangeEvent<WorktreeNode>) => {\r\n\t\t\tconst selectedFiles = e.selection.filter((node) => { return node instanceof WorktreeFile })\r\n\t\t\tif (e.selection.length == 0) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (e.selection.length == 1) {\r\n\t\t\t\tif (!e.selection[0].uri) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tif (!(e.selection[0] instanceof WorktreeFile)) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tconst compareUri = await getMergeBaseGitUri(e.selection[0])\r\n\t\t\t\tconsole.log('compareUri=' + compareUri + '; selectedUri=' + e.selection[0].uri)\r\n\t\t\t\tconst title = '[Worktree: ' + e.selection[0].getRepoNode().label + '] ' + e.selection[0].relativePath + ' vs merge-base'\r\n\t\t\t\tawait vscode.commands.executeCommand('vscode.diff', compareUri, e.selection[0].uri, title)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.refresh().then(() => console.log('extension activated!'))\r\n\t}\r\n\r\n\trefresh () {\r\n\t\treturn initWorktree()\r\n\t\t\t.then(() => {\r\n\t\t\t\treturn this.tdp.updateTree()\r\n\t\t\t}, (e) => {\r\n\t\t\t\tconsole.error('failed to init worktree view, attempting to display anyway (e=' + e + ')')\r\n\t\t\t\tthis.tdp.updateTree()\r\n\t\t\t\tthrow e\r\n\t\t\t})\r\n\t}\r\n\r\n\tpublic getRootNodes() {\r\n\t\treturn tree\r\n\t}\r\n\r\n\tpublic getNode (uri: vscode.Uri) {\r\n\t\tconsole.log('fileMap.get uri=' + uri.fsPath)\r\n\t\treturn fileMap.get(uri.fsPath)\r\n\t}\r\n\r\n\tpublic reveal (nodeOrUri: WorktreeNode | Uri, options: { select: boolean, focus: boolean }) {\r\n\t\tlet node: WorktreeNode | undefined = undefined\r\n\t\tif (nodeOrUri instanceof Uri) {\r\n\t\t\tconsole.log('nodeOrUri.fsPath=' + nodeOrUri.fsPath)\r\n\t\t\tnode = this.getNode(nodeOrUri)\r\n\t\t\tconsole.log('node.id=' + node?.id)\r\n\t\t\tif (!node) {\r\n\t\t\t\tconsole.error('node not found for uri=' + nodeOrUri.fsPath)\r\n\t\t\t\tthrow new Error('node not found for uri=' + nodeOrUri.fsPath)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnode = nodeOrUri\r\n\t\t}\r\n\t\treturn this.view.reveal(node, options)\r\n\t\t\t.then(() => {\r\n\t\t\t\tconsole.log('revealed node.id=' + node.id)\r\n\t\t\t}, (e: unknown) => {\r\n\t\t\t\tconsole.error('failed to reveal node.id=' + node.id + ' (e=' + e + ')')\r\n\t\t\t\tthrow e\r\n\t\t\t})\r\n\t}\r\n}\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-extra-semi",
        "replacedBy": []
      },
      {
        "ruleId": "no-mixed-spaces-and-tabs",
        "replacedBy": []
      }
    ]
  }
]
